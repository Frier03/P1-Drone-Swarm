
from djitellopy import Tello as dji
from time import sleep, time
import atexit
import math
import logging
from threading import Thread


class Drone():
    def __init__(self, ip="192.168.10.1", mac="aa:aa:aa:aa:aa", distanceBetweenPads = 40):
        self.dji : dji = None

        #Custom variables -----------------------
        self.ip = 0
        self.mac = mac
        self.connected = False

        self.abs_x = 0
        self.abs_y = 0
        self.abs_z = 0
        self.rotation = 0
        self.battery = 0
        self.totalSpeed = 0

        self.lastSeenPad = 0
        self.isDataNew = False
        self.distanceBetweenPads = distanceBetweenPads

        self.lastState = 0
        
        self.setIp(ip)

        #Start connectionUpdater
        T = Thread(target=self.connectionUpdater)
        T.daemon = True
        T.start()

        #Start position updater thread
        T = Thread(target=self.mainUpdater)
        T.daemon = True
        T.start()


    def setIp(self, newIP):
        if self.ip == newIP:        #Only change if new ip
            return
        
        self.connected = False
        self.ip = newIP
        self.dji = dji(host=newIP.strip(), retry_count=1)   #Generates an error after x (1) retries
        self.dji.LOGGER.setLevel(logging.INFO)             #For debugging and output in terminal


    #CAN BE MOVED INTO Class Swarm() when that is created. To reduce amount of threads
    def connectionUpdater(self):
        timeoutCounter = 0
        while True:
            try:
                if not self.connected:
                    #dji.connect() will run for 999 retries until connection is made
                    self.dji.connect()  #Is changed to timeout after 1 sec. Look package files
                    #Connect generates an error if not connected
                    self.dji.enable_mission_pads()
                    self.dji.set_mission_pad_detection_direction(0)
                    self.connected = True

                if self.connected:  #Should maybe change into a non-query command
                    #response = self.dji.send_command_with_return("battery?", timeout=1)
                    state = 0
                    #state = self.dji.get_current_state()
                    #state = self.dji
                    #print(state)
                    if self.lastState == state:      #If no response gotten within 1 second
                        timeoutCounter += 1
                        if timeoutCounter > 15:
                            #self.connected = False
                            timeoutCounter = 0
                    else:
                        timeoutCounter = 0
                    
                    #self.lastState = state
            except:
                pass
            sleep(0.1)


    def mainUpdater(self):
        while True:
            try:
                if self.connected:
                    self.rotation = self.dji.get_yaw()
                    self.totalSpeed = math.sqrt(self.dji.get_speed_x()**2 + self.dji.get_speed_y()**2 + self.dji.get_speed_z()**2)
                    self.battery = self.dji.get_battery()

                    #POSITION CALCULATIONS
                    mid = self.dji.get_mission_pad_id()
                    x = self.dji.get_mission_pad_distance_x()
                    y = self.dji.get_mission_pad_distance_y()
                    z = self.dji.get_mission_pad_distance_z()
                    
                    if mid != -1:               #If a pad is found
                        xRow = mid//3           #Just think about. Its very easy to understand
                        yRow = (mid-1) % 3
                        
                        self.abs_x = self.distanceBetweenPads * xRow + -x
                        self.abs_y = self.distanceBetweenPads * yRow + -y
                        self.abs_z = z

                        self.lastSeenPad = mid
                        self.isDataNew = True
                        #print(mid, "Absolute", self.abs_x, "|", self.abs_y, "|", self.abs_z)
                    else:
                        self.isDataNew = False
                        #print("No pad?")
            except:
                print("Is this updating the ip?")

            sleep(0.1)





if __name__ == "__main__":
    drone = Drone(ip="192.168.137.75")

    while not drone.connected:
        print("Connecting")
        sleep(0.5)

    
    sleep(5)
    print("Takeoff")
    drone.dji.takeoff()
    print("Done takeoffing")
    for i in range(10):
        print(f'Con={drone.connected:1} B:{drone.battery} | Mid={drone.dji.get_mission_pad_id():3} | {drone.abs_x:2}, {drone.abs_y:2}, {drone.abs_z:2}')
        missionPad = drone.dji.get_mission_pad_id()
        try:
            drone.dji.go_xyz_speed_mid(0, 0, 60, 50, missionPad)
            print("Go WORKED")
        except:
            print("Go didnt work")
        print("sleeping")
        sleep(5)
    drone.dji.land()
    drone.dji.emergency()


    for i in range(100000):
        print(f'Con={drone.connected:1} | Mid={drone.dji.get_mission_pad_id():3} | {drone.dji.get_acceleration_x():5} | ')
        sleep(0.2)
    print("Landing")
    drone.dji.land()





    # #TEST for swapping IP (if connection is reset)
    # for i in range(20):
    #     while not drone.connected:
    #         print("Connecting")
    #         sleep(1)
    #     print(f'{drone.abs_x=}')
    #     if i == 10:
    #         print("Setting new ip")
    #         drone.setIp("192.168.137.181")
    #     sleep(1)
    


    ## FOR PLOTTING coordinates
    # import matplotlib.pyplot as plt
    # plt.ion()
    # plt.axis([-20, 100, -20, 100])

    # xlist = []
    # ylist = []

    # for i in range(10000):
    #     plt.plot(drone.abs_x, drone.abs_y)
    #     if drone.connected and drone.isDataNew:
    #         plt.scatter(drone.abs_y, drone.abs_x)
    #         plt.draw()
    #         plt.pause(0.05)
    #     sleep(0.2)
