
from djitellopy import Tello as dji
from time import sleep, time
import atexit
import math
import logging
from threading import Thread


class Drone(dji):
    def __init__(self, ip="192.168.10.1", mac="aa:aa:aa:aa:aa", distanceBetweenPads = 40):
        self.dji = dji(host=ip.strip(), retry_count=20)


        #Custom variables -----------------------
        self.ip = ip
        self.mac = mac
        self.connected = False

        self.abs_x = 0
        self.abs_y = 0
        self.abs_z = 0
        self.rotation = 0
        self.battery = 0
        self.totalSpeed = 0

        self.lastSeenPad = 0
        self.isDataNew = False
        self.distanceBetweenPads = distanceBetweenPads
        

        #Start connectionUpdater
        T = Thread(target=self.connectionUpdater)
        T.daemon = True
        T.start()

        #Start position updater thread
        T = Thread(target=self.mainUpdater)
        T.daemon = True
        T.start()


    #CAN BE MOVED INTO Class Swarm() when that is created. To reduce amount of threads
    def connectionUpdater(self):
        while True:
            if not self.connected:
                self.dji.connect()  #Is changed to timeout after 1 sec. Look package files
                self.dji.enable_mission_pads()
                self.dji.set_mission_pad_detection_direction(0)
                self.connected = True

            if self.connected:
                bat = self.dji.send_command_with_return("battery?", timeout=1)
                if "Aborting command" in bat:      #If no response gotten within 1 second
                    self.connected = False
                else: self.battery = bat

            sleep(0.1)



    def mainUpdater(self):
        while True:
            if self.connected:
                self.rotation = self.dji.get_yaw()
                self.totalSpeed = math.sqrt(self.dji.get_speed_x()**2 + self.dji.get_speed_y()**2 + self.dji.get_speed_z()**2)

                #POSITION CALCULATIONS
                mid = self.dji.get_mission_pad_id()
                x = self.dji.get_mission_pad_distance_x()
                y = self.dji.get_mission_pad_distance_y()
                z = self.dji.get_mission_pad_distance_z()
                
                if mid != -1:               #If a pad is found
                    xRow = mid//3           #Just think about. Its very easy to understand
                    yRow = (mid-1) % 3
                    
                    self.abs_x = self.distanceBetweenPads * xRow + -x
                    self.abs_y = self.distanceBetweenPads * yRow + -y
                    self.abs_z = z

                    self.lastSeenPad = mid
                    self.isDataNew = True
                    #print(mid, "Absolute", self.abs_x, "|", self.abs_y, "|", self.abs_z)
                else:
                    self.isDataNew = False
                    #print("No pad?")

            sleep(0.1)





if __name__ == "__main__":
    drone = Drone(ip="192.168.137.42")
    #drone1.dji.LOGGER.setLevel(logging.DEBUG)
    drone.dji.LOGGER.setLevel(logging.WARNING)


    import matplotlib.pyplot as plt

    plt.ion()
    plt.axis([-20, 100, -20, 100])

    xlist = []
    ylist = []

    for i in range(10000):
        print(drone.connected, drone.abs_x, drone.abs_y, drone.abs_z, drone.rotation, drone.totalSpeed)
        #plt.plot(drone.abs_x, drone.abs_y)
        if drone.connected and drone.isDataNew:
            plt.scatter(drone.abs_y, drone.abs_x)
            plt.draw()
            plt.pause(0.05)
        
    print("Done")
    sleep(1000)

